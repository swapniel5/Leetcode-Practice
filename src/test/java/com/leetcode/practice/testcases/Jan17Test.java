package com.leetcode.practice.testcases;
// Generated by CodiumAI

import com.leetcode.practice.January2024.Jan17;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;


import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class Jan17Test {


    // Should return an empty list when given n = 0
    @Test
    public void test_empty_list_when_n_is_zero() {
        // Given
        int n = 0;

        // When
        List<String> result = Jan17.generateParenthesis(n);
        result.forEach(System.out::println);
        // Then
        assertEquals(1, result.size());
    }

    // Should return a list containing "()" when given n = 1
    @Test
    public void test_list_with_one_pair_of_parentheses_when_n_is_one() {
        // Given
        int n = 1;

        // When
        List<String> result = Jan17.generateParenthesis(n);

        // Then
        assertEquals(Arrays.asList("()"), result);
    }

    // Should return a list containing "()()", "(())" when given n = 2
    @Test
    public void test_list_with_two_pairs_of_parentheses_when_n_is_two() {
        // Given
        int n = 2;

        // When
        List<String> result = Jan17.generateParenthesis(n);

        // Then
        Assertions.assertEquals(Arrays.asList("()()", "(())"), result);
    }

    // Should return a list containing "()()()", "()(())", "(())()", "(()())", "((()))" when given n = 3
    @Test
    public void test_list_with_three_pairs_of_parentheses_when_n_is_three() {
        // Given
        int n = 3;

        // When
        List<String> result = Jan17.generateParenthesis(n);

        // Then
        assertEquals(Arrays.asList("()()()", "()(())", "(())()", "(()())", "((()))"), result);
    }

}